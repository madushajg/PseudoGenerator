__label__1 apply cross validation
__label__1 return accuracy
__label__1 show accuracy
__label__1 calculate accuracy
__label__1 print accuracy
__label__1 use test data to find accuracy
__label__1 apply test set to model and obtain the accuracy
__label__1 obtain the accuracy by using validation set
__label__1 find accuracy and assign it in to variable named accuracy
__label__1 predict class for test data and return accuracy
__label__1 predict class for validation set
__label__1 define variable predictions and predict clf for X_test
__label__1 use X_test to find accuracy
__label__1 define variable predictions and predict clf for X_test
__label__2 initialize float variable named FUZ with value 909.56
__label__2 assign 78.56 to pt
__label__2 assign 567.045 to variable def
__label__2 define variable T and assign 0.84
__label__2 define a float variable called burnable and assign 56.89 as value
__label__2 depth = 27.245
__label__2 average is 45.68
__label__2 create a float variable named rainfall and assign 5.64 to it
__label__2 goodness is a variable with value 4.4852
__label__2 value of rain is 78.2
__label__2 substitute decimal 5.5648 to variable count
__label__2 assign value 8.95 to double variable my_val
__label__2 winning_rate is a double variable which has value 4.00564
__label__3 create a variable named x and assign 45 to it
__label__3 initialize int variable named FUZ with value 909
__label__3 assign 78 to pt
__label__3 no_of_wins is a int variable which has value 4
__label__3 assign 545 to variable def
__label__3 define an integer variable called burnable and assign 88 as value
__label__3 define variable T and assign 48
__label__3 resolution = 487
__label__3 equity is equals to 67
__label__3 create an int variable named rainfall and assign 64 to it
__label__3 goodness is a variable with value 4
__label__3 value of tip is 8
__label__3 assign 3 to integer variable happiness
__label__3 declare Integer variable named as number, 294,549,560 as value of the variable
__label__4 add 'Tom is a man' to variable mal
__label__4 initialize string variable named FUZ with 'Fuz is my name'
__label__4 substitute string nice to variable str
__label__4 assign hello df to string variable hello
__label__4 goodness is a variable with value any string
__label__4 equity name is equals to some name
__label__4 define variable phase and assign hello world.
__label__4 define a string variable called some string and assign 'your name' as value
__label__4 assign Usha to string variable long_string
__label__4 value of string variable name is Yilokyr
__label__4 create a string variable named str and append "My Name" to str
__label__4 my_string = my name is R
__label__5 define variable pepper
__label__5 allocate memory to variable length
__label__5 define a variable named uft
__label__5 define an integer variable named weight
__label__5 define a floating point variable named weight
__label__5 define a string variable named weight
__label__5 initialize a variable as any_name
__label__5 my_height is a null variable
__label__5 create a variable named tizzle
__label__5 create variable d
__label__5 initialize an empty integer variable named F
__label__5 declare an empty variable with the name validity 
__label__6 create list e
__label__6 create a list named tizzle
__label__6 my_height is a empty list
__label__6 initialize a list as any_name
__label__6 define a string list named weights
__label__6 define a floating point list named weight
__label__6 define an integer list named weights
__label__6 define a list named uft
__label__6 allocate memory to list fruits
__label__6 define list pepper
__label__6 create array basic_array
__label__6 create an array named tizzle
__label__6 create a list named tizzle
__label__6 my_height is a null array
__label__6 define a string array named weight
__label__6 define a floating point array named weight
__label__6 define an integer array named weight_list
__label__6 define an empty array named uft
__label__6 allocate memory to array my_array
__label__6 declare an empty array named st_array
__label__6 define array pep
__label__7 associate Python to train the ML model
__label__7 write the source code by using R
__label__7 language = python
__label__7 programming language = Python
__label__7 language is R
__label__7 use R as the language
__label__7 build model using python
__label__7 preferred programming language = C
__label__8 k value in KNN is 45
__label__8 value of k = 4
__label__8 assign 5 to K
__label__8 K = 2
__label__8 k is 3
__label__8 N is 7
__label__8 N = 4
__label__8 referring to 5 neighbors
__label__8 consider 10 neighbors
__label__8 No of neighbors = 5
__label__9 define variable clf and classify X_train y_train using Logistic Regression
__label__9 classify using regression
__label__9 classifier is LinearSVC
__label__9 clf = Logistic Regression
__label__9 classify data frame using MultinomialNB
__label__9 import KNN
__label__9 Algorithm = DTC
__label__9 Apply K-Means
__label__9 use KNN classifiction
__label__9 By applying support vector machine
__label__9 use ANN
__label__9 train the model using Neural Network
__label__9 build model by applying Random Forrest
__label__9 clustering algorithm is K-means
__label__9 use Decision Tree classifier to learn the mode
__label__9 define variable target_class and assign TARGET_CLASS
__label__10 define my_class as class
__label__10 class = rating_text
__label__10 class rating_text
__label__10 class attribute = currency
__label__10 ground truth = pass
__label__10 use raining as class
__label__10 class is SL_win
__label__10 class = play_golf
__label__10 take my_class as the class
__label__10 define variable clf and classify X_train y_train using Algorithm
__label__11 from data_frame_library
__label__11 import Pandas
__label__11 import dataframe handler
__label__11 import data manipulation library
__label__11 By using Pandas
__label__11 I want to use a data manipulation library
__label__11 use data manipulation library
__label__11 import data frame generator
__label__11 import Pandas as pd
__label__11 use data frame handler
__label__11 use Pandas or similar kind of library
__label__11 import library dataframe
__label__12 Use inbuilt array operator
__label__12 By using multidimensional array
__label__12 import Numpy
__label__12 using multidimensional array operator
__label__12 use array organizer
__label__12 import similar library to Numpy
__label__12 import library multidimentional array
__label__13 columns to be dropped = findex2, findex9
__label__13 drop findex2
__label__13 ignore 4444, findex1, findex2, findex9  columns
__label__13 remove 9999 column
__label__13 drop columns 9999, 4444
__label__13 drop column 9999dr
__label__13 delete column1, column4 and column6
__label__13 not consider price, sales
__label__13 ignore data points in 2 nd column, 3rd column and 5 th column
__label__13 drop data in column10 and column15
__label__13 features to be ignored = weight, height, length
__label__13 not use distance and velocity for train the model
__label__13 eliminate column1 and column2 from data set
__label__13 hide attribute 1, attribute 2, attribute 3 , attribute 4 and  attribute 5 from learning
__label__14 columns to be dropped = findex2 to findex9
__label__14 drop features in range of column3 and column5
__label__14 ignore attributes from attribute1 to attribute7
__label__14 remove column 1 to column 7
__label__14 drop columns, 9999 to 4444
__label__14 drop columns in between name and sales
__label__14 delete all attributes between column1 and column5
__label__14 not consider feature 1 to feature 10
__label__14 features to be ignored = weight - length
__label__14 hide feature 1 to feature 5 from model learning
__label__14 drop data in column10 and column15
__label__14 ignore data points between 2 nd column and 5 th column
__label__15 otherwise,
__label__15 else (any).
__label__15 else then any,
__label__15 else, then
__label__15 else any,
__label__15 else if any
__label__15 else,
__label__15 IF not,
__label__15 if not
__label__15 if not the the case,
__label__15 in case, the given condition is not satisfied
__label__16 terminate classification
__label__16 stop algorithm
__label__16 stop
__label__16 End
__label__16 end of the pseudo code
__label__16 terminate the program
__label__16 close the application
__label__16 finish ML program
__label__16 quite algorithm
__label__16 conclude steps
__label__17 repeat until 15
__label__17 repeat for 10 times
__label__17 for 30 times
__label__17 do 7 number of iterations
__label__17 for(int i=0; i<5; i++)
__label__17 run for loop for 10 times
__label__17 iterate 5 times
__label__17 for (x = 10, x=0, x--){ 
__label__17 for the range of 6 to 34,
__label__17 for temp in range(4, 8)
__label__17 for x in range(7)
__label__17 repeat the process for 96 iterations
__label__18 for element in given_list
__label__18 for every k in keys
__label__18 for e in elements :
__label__18 for item in item_list
__label__18 apply for every member in the given_list
__label__18 do to each item in the my_list
__label__18 iterate through each member in the array
__label__18 iterate for each column in the dataset,
__label__19 if !any,
__label__19 ! any:
__label__19 if !( any )
__label__19 IF !any
__label__19 not the case that something is not false
__label__19 not the case of any is true,
__label__19 if not any,
__label__19 if any is not true,
__label__19 if result is false,
__label__19 if the condition is not true:
__label__20 not the case of any is not true,
__label__20 IF any is not FALSE
__label__20 if using_sysrandom is not false,
__label__20 not the case of any is false,
__label__20 if any is true,
__label__20 IF any
__label__20 IF (BOOL variable)
__label__20 if ( some condition ):
__label__20 if (anything)
__label__20 if true,
__label__20 if something
__label__21 if moon is not same as sun:
__label__21 IF if van is different with car
__label__21 if rat is not similar to cat,
__label__21 if square is not wheel:
__label__21 if not the case that some1 is equal to some2
__label__21 IF if size of c_ulong does not equals to  Size of c_void_p,
__label__21 if ( dog_age !== cat_age ),
__label__21 if ( any1 != any2 ):
__label__21 if e.errno is not equal to errno.EEXIST,
__label__21 if man and nam are different
__label__21 if the value of  variable X and the value of variable Y are not equals,
__label__22 if moon is smaller than sun:
__label__22 if van  is lesser than car
__label__22 if rat shorter than cat,
__label__22 if square is fewer than the wheel:
__label__22 not the case that some1 is more than some2
__label__22 if size of c_ulong does smaller than Size of c_void_p,
__label__22 if ( dog_age  < cat_age ),
__label__22 if ( any1  <  any2 ):
__label__22 if e.errno is not greater than errno.EEXIST,
__label__23 if rat is similar to cat,
__label__23 if my_name is same as your_name:
__label__23 if num1 is num2
__label__23 if real equals to expected,
__label__23 if ( dog_age = cat_age ) {
__label__23 if any1 == any2:
__label__23 if any1 is equals to any2
__label__23 if the value of X and the value of Y are exactly the same,
__label__24 if e.errno is not lesser than errno.EEXIST,
__label__24 if ( any1  >  any2 ):
__label__24 if ( dog_age  > cat_age ),
__label__24 if size of c_ulong does higher than Size of c_void_p,
__label__24 not the case that some1 is lesser than some2
__label__24 if square is bigger than the wheel:
__label__24 if rat taller than cat,
__label__24 if van  is larger than car
__label__24 if moon is greater than sun:
__label__25 import scikit
__label__25 using E1070
__label__25 e 1070
__label__25 scikit learn
__label__25 by using SKLEARN
__label__25 import scikit learn
__label__25 use e1070
__label__25 use sklearn
__label__25 import suitable machine learning package
__label__25 use appropriate ML package
__label__25 refer a machine learning library
__label__25 import some machine learning module
__label__25 use similar kind of machine learning library to Scikit Learn
__label__26 load FuzzyWuzzy
__label__26 by using os
__label__26 use module_name
__label__26 import module
__label__26 using a given_module_name
__label__26 import package_name
__label__26 import confusion_matrix from sklearn
__label__26 use a preprocessing library
__label__26 from sklearn import preprocessing
__label__26 import library DataVisualization
__label__27 read dataset
__label__27 dataset = dataset_name
__label__27 loading dataset ds1
__label__27 Build the model by using the dataset
__label__27 use given dataset
__label__27 Load dataset
__label__27 using the given csv file
__label__27 load data set as ds
__label__27 source file = dataset
__label__27 by using the given CSV file as the data set
__label__27 refer to the uploaded data set
__label__27 put the given data set in to a data frame
__label__28 normalize if necessary
__label__28 apply normalization
__label__28 normalize dataset
__label__28 use scaler to normalize attribute values
__label__28 normalize by using scaler
__label__28 normalize feature set
__label__28 apply normalization for required columns
__label__28 normalize uploaded dataset
__label__29 display words
__label__29 print line text
__label__29 println(some word pharse)
__label__29 print()
__label__29 print something
__label__29 print
__label__29 print anything
__label__29 show (result)
__label__29 display the requested result on the screen
__label__30 use 0.1 from the data set for validation
__label__30 validation = 0.256
__label__30 split dataset in to test and train
__label__30 split dataset
__label__30 test,train ratio = 0.24
__label__30 allocate 35% for testing
__label__30 define a variable called test and assign 0.78 to it
__label__30 35% for testing
__label__30 split size for testing = 0.25
__label__30 test size = 0.3
__label__30 test set is 0.6 of data set
__label__30 use 60% data for testing
__label__31 use 78% of the source data to learning
__label__31 use 0.2 of data for build the model
__label__31 training set = 0.4
__label__31 train/test ratio = 0.48e
__label__31 allocate 60% for training
__label__31 train 80%
__label__31 split size for training = 0.85
__label__31 define a floating point variable train and assign 0.89
__label__31 define double variable called train with value 0.78
__label__31 train ratio is 0.5
__label__31 use 0.8 to train the model
__label__31 0.75 for training
__label__31 use 60% data for training
__label__31 declare a floating point variable called train_set and assign 0.078 to it
__label__32 create the model
__label__32 build model
__label__32 implement clustering algorithm
__label__32 start above mentioned algorithm
__label__32 Apply ml algorithm to data set
__label__32 Begin clustering
__label__32 implement algorithm
__label__32 Apply algorithm
__label__32 Start classification
__label__33 until the condition is true
__label__33 while()
__label__33 while something:
__label__33 while (1):
__label__33 white true
__label__33 do infinitely
__label__34 goodness is a variable with class instance goody
__label__34 create variable named rainfall and assign rain to it
__label__34 lemmatizer is lemmatizer () in NLTK
__label__34 depth = depthclass()
__label__34 define a variable called burnable and initiate burn class as value
__label__34 instantiate preprocessing library and assign to variable ps
__label__34 assign some_class instance  to variable def
__label__34 declare a variable named tfidf_transformer, and assign tfidf transformer()
__label__34 define variable le and instantiate label encoder
__label__34 define variable scaler and assign standard scaler class
__label__35 show confusion matrix
__label__35 obtain the confusion matrix by using predictions
__label__35 find confusion matrix
__label__35 define variable cm and generate confusion matrix for predictions
__label__35 return confusion matrix as ca
__label__35 apply confusion matrix
__label__35 calculate relevant confusion matrix
__label__36 use attribute 1, attribute 2, attribute 3 , attribute 4 and  attribute 5 for learning
__label__36 features to be used to learn = weight, height,  length
__label__36 selected features =  9999, 4444
__label__36 use 4444, findex1, findex2, findex9  columns
__label__36 columns to be considered = findex2, findex9
__label__36 attributes are column 1 , column 2 and column 6
__label__36 features = runs, wickets, no_of_100's, average, strke_rates
__label__37 use knn from the machine learning package
__label__37 import k-means from ML library
__label__37 import KNN
__label__37 import NN from Machine Learning library
__label__37 import library SVM
__label__37 import library Logisitic Regression
__label__37 import library Random Forest
__label__37 import library Gaussian Naive Bayes
__label__37 import library Multinomial Naive Bayes
__label__37 import k-nearest neghbour library
__label__38 to encode object type columns as numeric
__label__38 numerize dataframe column and reassign dataframe column
__label__38 numerize feature set
__label__38 numerize dataset
__label__38 numerize if necessary
__label__38 apply numerization
__label__38 apply numerization for required columns
__label__38 numerize uploaded dataset
__label__38 encode object type attributes as numeric
__label__39 use learned model to predict feature for my_list
__label__39 predict relevant class for dp
__label__39 apply sample data to the model and obtain class
__label__39 apply data in mer_rio to model and find relevant classes
__label__39 find class for given data point
__label__39 predict clf for new_datapoint
__label__39 parse list_values to model and obtain predicted classes
__label__40 drop data points which do not contain value for class
__label__40 do not consider data points with empty cell in target class
__label__40 ignore rows with no data in class feature
__label__40 take only values not empty in class atribute
__label__40 delete cells with null value in class column
__label__40 remove null cells in target class
__label__40 remove datapoints that have NULL target_class from the dataframe and reassign dataframe
__label__40 remove null data points in train set
__label__41 fill incomplete values by using lbcf
__label__41 replace values for unfilled cells from nocf
__label__41 remove null values in column4 by using column average
__label__41 replace NaN values with next observation carried forawrd
__label__41 replace Null values with last observation carried forawrd
__label__41 replace empty values with the column mean and reassign dataframe
__label__42 put train ans test sets in to separate data frames
__label__42 separate training and testing sets
__label__42 split dataset by split_ratio
__label__42 define train and validate sets ans classes
__label__42 assign train set to X_train, y_train and test set to X_test, y_test
__label__42 assign test set to X_test and test class to y_test
__label__42 assign train set to X_train and train class to y_train
__label__42 separate data set for training and validation
__label__42 divide dataset in to training and testing sets
__label__42 split dataframe feature set and target class
__label__43 fill empty array temp with name, age and weight
__label__43 add 49, 45 to array iop
__label__43 ruplef is a list with values computer, phone, book, 465, and 244.43
__label__43 define a string array called str_array and put flowers, guitars, elephants and drums to it
__label__43 num_array = Arshad, Milan
__label__43 create a list named temp_list and add 'Milan', 'Madusha', 'Dinusha', 'Arshad', 'Ruchira'
__label__43 assign 45, 89 ,45 ,12 and 44 to number_array
__label__43 my_list.append(runs, wickets, total, strike_rate)
__label__43 add element1 to element_list
__label__43 append age, height, skills to the list named my_list
__label__44 normalize 4444 and 9999 in data set
__label__44 apply normalization to col1, col2 by using scaler
__label__44 normalize feature 1, feature 2 and feature 3 by using scale of 0 to 10
__label__44 normalize column1 and column 5 in uploaded dataset
__label__44 columns to be normalized = 3, 4
__label__44 apply normalization to column1 and column2
__label__44 features to be normalized = name, age, place
__label__44 normalize attribute 1, attribute 2, attribute 3 and attribute 5
__label__45 numerize 4444 and 9999 in data set
__label__45 numerize column1 and column 5 in uploaded dataset
__label__45 numerize attribute 1, attribute 2, attribute 3 and attribute 5
__label__45 features to be numerized = name, age, place
__label__45 apply numerization to column1 and column2
__label__45 numerize column1 to column 5
__label__45 convert categorical data in feature2 and feature5 to numerical data
__label__45 columns to be numerized = 3, 4
__label__46 end of for
__label__46 conclude for loop
__label__46 break the for loop
__label__46 stop for loop
__label__46 terminate for loop
__label__46 escape from for loop
__label__46 end of for loop
__label__47 end of if condition
__label__47 escape from if
__label__47 close the if condition
__label__47 terminate if statement
__label__47 stop if condition
__label__47 end of else
__label__47 end of IF
__label__47 conclude IF condition
__label__48 end of while
__label__48 escape from while loop
__label__48 terminate while loop
__label__48 end of while loop
__label__48 stop while loop
__label__48 break the while loop
__label__48 conclude while loop

__label__1 apply test set to model and obtain accuracy
__label__1 finally, find accuracy of trained model
__label__1 use predictions for validation set to find accuracy
__label__1 find accuracy for the model
__label__1 determine the accuracy of prediction model

__label__35 find confusion matrix for the trained model
__label__35 finally, find confusion matrix
__label__35 show confusion matrix for model
__label__35 find performance using confusion matrix
__label__35 display confusion matrix

__label__9 train model by using logistic regression
__label__9 algo = multinomialNB
__label__9 decision tree classificarion is the algorithm
__label__9 use knn as the algorithm
__label__9 use naive bayes for classification

__label__12 import a dataframe handler
__label__12 dataframe library = Pandas
__label__12 import Pandas as pd
__label__12 import pandas library
__label__12 datamanipulation library = pandas

__label__8 consider 4 neighbors 
__label__8 N value of knn is 6
__label__8 refer to 10 neighbors
__label__8 k = 4
__label__8 consider 4 neighbors in KNN

__label__11 use appropriate array manipulator
__label__11 array operator = numpy
__label__11 import numpy as np
__label__11 use numpy for array manipulation

__label__15 otherwise
__label__15 if not
__label__15 else

__label__16 mark the end
__label__16 stop
__label__16 break

__label__46 mark end of for loop
__label__46 end of for loop
__label__46 stop for loop

__label__47 escape from immediate if condition
__label__47 end of if condition
__label__47 go out from if condition

__label__48 mark end of while
__label__48 end of while loop

__label__17 run below lines for 78 time
__label__17 iterate through all list items for 5 times
__label__17 run below logic for 5 times

__label__19 if condition is not satisfied
__label__19 else
__label__19 not if

__label__20 if the condtion is satisfied
__label__20 if
__label__20 if the condition is true

__label__21 if object1 is not equals to object2
__label__21 if object 1 and object 2 are not eqaul

__label__22 if object1 is less than object2
__label__22 if x<y
__label__22 if value of x is less than value of y

__label__23 if object1 is equals to object2
__label__23 if object 1 and object 2 are eqaul

__label__24 if object1 is grater than object2
__label__24 if x<y
__label__24 if value of x is greater than value of y

__label__37 import logistic regression 
__label__37  ML algorithm = naive bayes
__label__37  knn is the algorithm
__label__37  imoport knn as knn
__label__37  import knn ML algorithm

__label__25 use sklearn to learn the model
__label__25 learning package = e1070
__label__25 import sklearn ML library

__label__26 use traveter to do machine translation
__label__26 import fuzzy for implement fuzzy logic

__label__27 load data points in the data set
__label__27 refer to given dataset when build the model
__label__27 build the model using given dataset

__label__28 normalize dataset before applying classifcation
__label__28 set each data point in to one scale
__label__28 take all data points to one range
__label__28 normalize data to get values between 1  to 10

__label__44 normalize data points in column 4,5 and 9
__label__44  scale the dataset for column 3 and column 6
__label__44  normalize data for columns 1,2 and 4

__label__38 numerize categorical datapoints
__label__38 apply label encoding to data set
__label__38 convert categorical data to numerical
__label__38 convert non numerical labels to numerical labels
__label__38 convert categorical data to numbers

__label__45 numerize categorical data points in column 3,7 and 8
__label__45 convert categorical data to numerical
__label__45 convert categorical data in col 1 , col 3 to  numerical
__label__45 convert categorical data in columns 1,2 and 5

__label__29 print 'This is pesudo'
__label__29 show 'awesome ps' in scrren
__label__29 display string 'smaple codes are here'
__label__29 display string 'test'
__label__29 show message 'this is pseudo'

__label__40 filter null data points for target_class
__label__40 do not leave nan rows for class feature
__label__40 preprocess data set by removing empty cells in target class
__label__40 do not consider null target classes
__label__40 remove all null target classes

__label__41 fill null values by using average of column
__label__41 replace absent values by using nocf
__label__41 preprocess data set by filling empty cells
__label__41 fill empty cells with the minimum of the column
__label__41 fill empty cells

__label__42 devide dataset in to two sets, one for testing and one for training
__label__42 separate uploaded dataset for validation and learning
__label__42 allocate portion of data for traing and other portion for testing
__label__42 devide dataset for testing and training
__label__42 half of data set is for training and other half is for testing

__label__32 classify uploaded dataset by using naive bayes
__label__32 build ml model by following above instructions
__label__32 construct the machine learning model
__label__32 start classify the model using knn
__label__32 feed the data and start algorithm

__label__33 run until the end codition satisfied
__label__33 while (object1 is not null)
__label__33 run below lines of code while x<5
__label__33 run while condition satisfied

__label__3 create int variable test and assign 20
__label__3 assign value 2 to the int variable test
__label__3 value of variable total is 3
__label__3 assign 10 as the value of test
__label__3 define variable x as 5
__label__3 initilize variable sum as 10
__label__3 assign variable p with value 23
__label__3 set value of variable x to 3
__label__3 value of variable x is 5
__label__3 assign value 10 for variable p
__label__3 variable q has value 6
__label__3 value stored in y is 10
__label__3 define int variable y as 10
__label__3 define int variable score as 12
__label__3 assign 25 to variable length 

__label__5 define int variable count
__label__5 declare integer variable count
__label__5 create a new int variable as sum
__label__5 create float variable avg
__label__5 define variable c 
__label__5 initialize float variable named tyu
__label__5 create a variable as y
__label__5 create string variable emp_name
__label__5 define variable age to store AGE
__label__5 create a new variable called name
__label__5 mark variable is used to store student marks
__label__5 define int variable as sum
__label__5 create int variable as count
__label__5 define string wariable as firstName

__label__6 create String list and name it as myData
__label__6 declare integer list as myArray
__label__6 create String[] named myData
__label__6 use String array myArray to store names
__label__6 declare array x as int
__label__6 define integer array y
__label__6 define collection ar as double_array
__label__6 create a list named uop to store student marks
__label__6 declare a new list called names
__label__6 student marks are stored in list student_marks
__label__6 create String array as item_price 
__label__6 create String array as score_lengths
__label__6 declare ArrayList as arrayContent

__label__39 feed the data to the model to obtain predicted classes
__label__39 obtain the predicted classes for array riop using the model
__label__39 load the model and parse the data in my_array to obtain classification
__label__39 parse list my_list to the model and predict classes
__label__39 get classes using data in my_array

__label__7 use programming laguage python
__label__7 write an algorithm using R
__label__7 laguage is equal to R 
__label__7 write a code using python
__label__7 use python as the language
__label__7 language is Java

__label__13 delete colomn 1 and 2
__label__13 train the model without using column 1
__label__13 remove column 1 in training the model
__label__13 Ignore column 1 from the dataset
__label__13 Do not consider distance column for thaining the model

__label__36 use feature x,y to train the model
__label__36 define feature p, q as features
__label__36 use attribute 1 and 2 to train model
__label__36 features to be considered are socre,grade,expereince
__label__36 features = score,grade,experience
__label__36 use age,gender and weight as features
__label__36 use first 5 columns as features to train

__label__18 for each record in recordList
__label__18 iterate through every member in recordList
__label__18 iterate each element in list_aer untill != null 
__label__18 iterate every item utill the end of the list my_list
__label__18 loop the result_set for each result to get clf
__label__18 Iterate through each item in the list
__label__18 get each item in the list kio_er using a loop
__label__18 go through the list ty_leju and print each item

__label__31 training data set is 70%
__label__31 use 70% of the data set for training
__label__31 take 30% data for testing
__label__31 seperate 60% dataset for training
__label__31 use 30% of data for training
__label__31 split the data set as 70% for training rest as testing
__label__31 for training= 40% of total dataset
__label__31 40% is for testing 

__label__43 append name, age, color  to myData list
__label__43 insert 10 and 20 to myData list
__label__43 insert item to the itemList
__label__43 add item1 and item2 to the itemList
__label__43 append 20 to the array x
__label__43 Add two new items item1 and item2 to the list iop_ry
__label__43 expand the array by adding 1 ,2 3 to array rty

__label__4 define string variable as str and assign "String Test" to it
__label__4 assign "String Test" to str
__label__4 set value of string variable str to "String Test"
__label__4 initilize varible erae with '25 captains'
__label__4 assing '10 ducks and i fish' to the string variable b
__label__4 initilize variable x as 'go go lanka'
__label__4 name = 'ruchira'
__label__4 assign 'audi' for the variable car
__label__4 create a String variable and assign 'python' to it

__label__34 initialize class ert to variable named my_class
__label__34 declare class my_class and instantialte fuzzy()
__label__34 create class obj named tyui with class upperLimit
__label__34 define new class object named rty for class TFIDF
__label__34 declare class x to keep initialize my_class
__label__34 create a class called Animal and assign Dog class
__label__34 c_name = Animal()
__label__34 class name is Test and object is MuTestings.

__label__14 do not use col1 to col6 train 
__label__14 features to be hide = column 6 to 8
__label__14 drop column from column 1 to 5
__label__14 remove columns from comlumn 5 and column 6
__label__14 eleminate columns from column 1 and column 3
__label__14 Ignore the columns 1 to 5
__label__14 drop first column to third column
__label__14 Do not consider column 6 to 8

__label__10 use 'Age' as class
__label__10 target class = runs
__label__10 win_prediction is the target class
__label__10 take city as the ground truth
__label__10 consider student_type as the class
__label__10 classify dataset by using no_of_cars as the class




